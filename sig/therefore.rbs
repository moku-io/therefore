class NilClass
  def therefore: () { (self) -> void } -> self
    | () -> Enumerator[nil]

  def otherwise: [T] () { (self) -> T } -> T
    | () -> Enumerator[class]
    | (untyped) -> untyped
end

class FalseClass
  def therefore: () { (self) -> void } -> self
    | () -> Enumerator[nil]

  def otherwise: [T] () { (self) -> T } -> T
    | () -> Enumerator[class]
    | (untyped) -> untyped
end

module Kernel
  def therefore: [T] () { (self) -> T } -> T
    | () -> Enumerator[self]

  def otherwise: () { (self) -> void } -> self
    | () -> Enumerator[nil]
    | (untyped) -> untyped
end
